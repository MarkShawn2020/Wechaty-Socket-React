{"version":3,"sources":["styles/images/vase-red.png","styles/images/支付宝收款.jpg","styles/images/微信收款.png","styles/images/小成时光屋.png","DS/codes.ts","utils/$http.ts","DS/API.ts","DS/enums.ts","DS/default.ts","DS/actions.ts","store.ts","utils/icons.ts","components/CompFooter/CompStatus/CompUser.tsx","components/CompFooter/CompStatus/CompServers.tsx","components/CompFooter/CompStatus/CompClients.tsx","components/CompFooter/CompStatus/index.tsx","components/CompFooter/CompFooter.tsx","components/CompHeader/CompUserFeedback/CompFeedbackModal.tsx","utils/secret.ts","components/CompHeader/CompUserLogin/CompLoginForm.tsx","components/CompHeader/CompUserLogin/index.tsx","components/CompHeader/CompIntro/CompIntro.tsx","components/CompHeader/CompSettings/CompSettings.tsx","components/CompHeader/header.tsx","components/CompContent1/CompServers/CompRequestServer.tsx","components/CompContent1/CompServers/CompDaemonServer.tsx","utils/moment.js","components/CompContent1/CompServers/index.tsx","components/CompContent1/CompWechatyMessages/CompWechatyMessage.tsx","components/CompContent1/CompWechatyMessages/CompWechatyMessages.tsx","components/CompContent1/CompUserChats/index.tsx","components/CompContent1/CompContent1.tsx","utils/random.ts","components/CompContent2/CompServices/CompServices.tsx","components/CompContent2/CompWxBasicObjects/CompWxBasicObject.tsx","components/CompContent2/CompWxBasicObjects/CompWxBasicObjects.tsx","components/CompContent2/CompContent2.tsx","components/CompInvisible/CompWechatyScan/CompWechatScan.tsx","components/CompInvisible/CompInvisible.tsx","App.tsx","index.tsx"],"names":["module","exports","Code","axios","defaults","baseURL","process","timeout","ServiceType","TokenType","ScanStatus","ServerStatus","Collections","Visibility","Network","CookieKeys","$http","API","login","register","basic","friends","contactsCount","rooms","add","feedback","EventSocket","EventHttp","EventBrowser","USER","username","hasLogined","remember","deadTime","moment","toDate","WX_SCAN","status","Unknown","qrcode","WX_SELF","_id","id","friend","gender","type","phone","alias","avatar","city","name","province","signature","weixin","STATUS","FriendsPulling","RoomsPulling","BackendConnected","ServerRequesting","ServerStarting","RobotRunning","FeedbackModal","LoginModal","ScanModal","LoggingOut","locale","cookies","Cookies","socketClass","appName","socket","user","get","userMessages","wxSelf","wechat","wxScan","wxMessages","wxFriends","wxFriendsCount","wxRooms","clients","servers","bindEvents","eventSocket","hasOwnProperty","console","log","e","on","payload","socketStore","dispatch","socketAddress","this","io","actionType","callback","SERVER_WECHAT_READY","fetchFriendsCount","then","fetchRooms","SERVER_CONNECTION","SERVER_CONNECT","SERVER_DISCONNECT","CLIENT_REQUEST_SERVER","emit","code","SUCCESS","CLIENT_RELEASE_SERVER","CLIENT_REPLACE_SERVER","CLIENT_DAEMON_SERVER_OR_NOT","CLIENT_SEND_USER_CHAT","SERVER_PUSH_USER_CHAT","CLIENT_SEND_WX_MESSAGE","SERVER_PUSH_STATUS","WX_LOGIN","set","WX_LOGOUT","WX_MESSAGE","SWITCH_STATUS","key","toState","undefined","UPDATE_USER","FETCH_FRIENDS","FETCH_FRIENDS_SUCCESS","length","FETCH_FRIENDS_ERROR","warn","FETCH_FRIENDS_COUNT_SUCCESS","FETCH_MORE_FRIENDS_SUCCESS","FETCH_ROOMS_SUCCESS","FETCH_ROOMS_ERROR","WX_START","WX_STOP","WX_FRIENDSHIP","CLIENT_REFRESH_CONTACTS","CLIENT_SUBMIT_SETTINGS","params","wxid","data","skip","limit","onlyFriends","catch","err","SOCKET_STATE","state","INITIALIZED_STORE","createStore","action","handleActions","applyMiddleware","thunk","content","time","Date","IconType","CompUser","getState","className","MyIcon","createFromIconfontCN","scriptUrl","extraCommonProps","connect","props","DOT_CONNECTED","size","indicator","LoadingOutlined","spin","CompStatus","CompFooter","src","VaseImg","alt","href","target","rel","CompCoffee","PayAli","PayWechat","CompFeedbackForm","labelCol","span","onFinish","onFinishForm","initialValues","rate","form","Item","label","valuePropName","rules","required","message","TextArea","rows","placeholder","validateTrigger","visibility","useState","feedbackModalVisible","setFeedbackModalVisible","Form","useForm","isSubmitMode","setIsSubmitMode","onCloseFeedbackModal","onClick","visible","title","okButtonProps","htmlType","footer","onCancel","value","email","post","insertedCount","notification","success","description","error","resetFields","icon","COFFEE","SUBMIT","CryptoJS","enc","Utf8","parse","iv","encodeAES","AES","encrypt","mode","CBC","padding","pad","Pkcs7","toString","sendWelcomeChat","isLoginMode","setIsLoginModel","waiting","setWaiting","useCookies","onRegister","userData","a","dataEncoded","JSON","stringify","getFieldValue","onLogin","onCloseLoginModal","onSubmit","prefix","UserOutlined","LockOutlined","dependencies","validator","rule","Promise","reject","resolve","noStyle","style","float","updateUserLogout","loginModalVisible","setLoginModalVisible","width","danger","Modal","info","accordion","jsx","CollapsePanel","header","ShareGroup","height","ownProps","submitSettings","setVisible","closeModal","onOk","getFieldsValue","switchStatus","menuKey","setMenuKey","VaseLogo","selectedKeys","background","requestServer","server","releaseServer","replaceServer","isLoading","setLoading","lastServerStatus","useRef","current","rejectLogin","IDLE","loading","WARNING","daemonServerDispatch","DAEMON","defineLocale","months","split","monthsShort","weekdays","weekdaysShort","weekdaysMin","longDateFormat","LT","LTS","L","LL","LLL","LLLL","l","ll","lll","llll","meridiemParse","meridiemHour","hour","meridiem","minute","isLower","hm","calendar","sameDay","minutes","nextDay","lastDay","nextWeek","startOfWeek","startOf","unix","lastWeek","sameElse","ordinalParse","ordinal","number","period","relativeTime","future","past","s","m","mm","h","hh","d","dd","M","MM","y","yy","week","dow","doy","MyMoment","serversTableColumns","dataIndex","render","text","record","MOBILE","PUPPET_MOBILE","PAD","PUPPET_PAD","WEB","PUPPET_WEB","isFree","RIGHT","WRONG","color","CONNECTING","RUNNING","ERROR","Error","fromNow","bodyStyle","columns","dataSource","map","token","pagination","CompWechatyMessageContainer","sendMessage","msg","from","popupVisible","setPopupVisible","replyRef","onVisibleChange","v","trigger","placement","Search","ref","autoFocus","enterButton","onSearch","isRoom","roomID","msgPayload","toID","wechatyMessages","messagesRef","messageEndRef","useEffect","offsetHeight","scrollIntoView","behavior","block","inline","image","Empty","PRESENTED_IMAGE_SIMPLE","maxHeight","MaxHeight","minHeight","position","left","top","clientCount","sendUserChat","userMessage","inputMessage","setInputMessage","enterTime","confirm","overflow","index","autoSize","minRows","maxRows","onChange","warning","getTime","CompContent1","getRandomInt","Math","floor","random","apiAddServicePost","serviceItem","serviceType","CompServices","services","Recall","Timing","Backup","Avatar","item","backgroundColor","Array","join","cursor","replyVisible","setReplyVisible","actions","Boolean","topic","MessageOutlined","Meta","opacity","members","pushMoreFriends","isPulling","skipRef","extra","items","itemsCount","i","children","paragraph","active","pageStart","initialLoad","loadMore","api","includes","hasMore","useWindow","threshold","loader","friendsCount","wechatyScan","imgSrc","setImgSrc","require","toDataURL","destroyOnClose","keyboard","maskClosable","closable","Waiting","Scanned","Confirmed","Cancel","Timeout","CompInvisible","App","Header","Content","Footer","ReactDom","Fragment","store","componentSize","document","getElementById"],"mappings":"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","file":"static/js/main.ec26732c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/vase-red.61152727.png\";","module.exports = __webpack_public_path__ + \"static/media/支付宝收款.39f03037.jpg\";","module.exports = __webpack_public_path__ + \"static/media/微信收款.cc3538a0.png\";","module.exports = __webpack_public_path__ + \"static/media/小成时光屋.f313bc43.png\";","export enum Code {\n  SUCCESS,\n  FAILED_FOR_UNKNOWN,\n  FAILED_FOR_YOU_SHOULD_LOGIN_FIRST,\n  FAILED_FOR_SOCKET_NOT_INITIALIZED,\n\n  SERVER_REQUEST_FAIL_FOR_BUSY,\n  SERVER_REQUEST_FAIL_FOR_NOT_PRIVILEGE,\n  SERVER_REQUEST_FAIL_FOR_NAME_EMPTY,\n  SERVER_REQUEST_FAIL_FOR_NAME_CONFLICT,\n  SERVER_REQUEST_FAIL_FOR_TOKEN_NOT_VALID,\n  SERVER_REQUEST_FAIL_FOR_BOT_START_ERROR,\n\n  SOCKET_DISCONNECTED_NOT_DAEMON,\n  SOCKET_DISCONNECTED_WITH_DAEMON,\n\n  USER_REGISTER_FAILED_FOR_NAME_EXISTED,\n  USER_REGISTER_FAILED_FOR_INVALID_USERNAME,\n  USER_REGISTER_FAILED_FOR_INVALID_PASSWORD,\n  USER_REGISTER_FAILED_FOR_UNKNOWN_REASONS,\n\n  USER_LOGIN_FAILED_FOR_NOT_EXIST,\n  USER_LOGIN_FAILED_FOR_INCORRECT_PASSWORD,\n  USER_LOGIN_FAILED_FOR_INCORRECT_USERNAME_OR_PASSWORD,\n  USER_LOGIN_FAILED_FOR_INVALID_USERNAME,\n  USER_LOGIN_FAILED_FOR_INVALID_PASSWORD,\n  USER_LOGIN_FAILED_FOR_UNKNOWN_REASONS,\n}\n","import axios from \"axios\"\n\nif (!process.env.REACT_APP_BACKEND_SERVER) throw new Error(\"not found base url\")\naxios.defaults.baseURL = process.env.REACT_APP_BACKEND_SERVER\naxios.defaults.timeout = 10000 // 设置这么短之后调试就要注意了，都会超时的\n\nconst $http = axios\nexport { $http }\nexport default axios\n","export const API = {\n  account: {\n    login: \"/account/login\",\n    register: \"/account/register\",\n    basic: \"/account/basic\",\n  },\n  wechat: {\n    basic: \"/wechat/basic\",\n    friends: \"/wechat/friends\",\n    contactsCount: \"/wechat/friends-count\",\n    rooms: \"/wechat/rooms\",\n  },\n  service: {\n    add: \"/service/request\",\n    feedback: \"/service/feedback\",\n  },\n}\n\nexport interface ParamsQueryWechatRooms {\n  wxid: string\n  skip?: number\n  limit?: number\n}\n\nexport interface ParamsQueryWechatFriends extends ParamsQueryWechatRooms {\n  onlyFriends?: boolean\n}\n\nexport enum ServiceType {\n  Recall = \"recall\",\n  Timing = \"timing\",\n  Backup = \"backup\",\n  Avatar = \"avatar\",\n  Network = \"network\",\n}\n\nexport interface ParamsBase {\n  ip?: string\n  time?: Date\n}\n\nexport interface ParamsServiceAddGet {\n  serviceType: ServiceType\n}\n\nexport interface ParamsServiceAddPost extends ParamsServiceAddGet, ParamsBase {}\n\nexport interface ParamsFeedbackPost extends ParamsBase {\n  rate: number\n  content: string\n  email: string\n  username: string\n}\n","export enum TokenType {\n  WEB,\n  PAD,\n  MOBILE,\n}\n\nexport enum ScanStatus {\n  Unknown = 0,\n  Cancel = 1,\n  Waiting = 2,\n  Scanned = 3,\n  Confirmed = 4,\n  Timeout = 5,\n}\n\nexport enum ServerStatus {\n  IDLE,\n  CONNECTING,\n  RUNNING,\n  DAEMON,\n  ERROR,\n}\n\nexport enum Collections {\n  Users = \"users\",\n  // Contacts = \"friends\",\n  Wechats = \"wechats\",\n  Rooms = \"rooms\",\n  Friends = \"friends\",\n  Services = \"services\",\n  Feedback = \"feedback\",\n}\n\nexport enum Visibility {\n  LoginModal = \"login_modal\",\n  FeedbackModal = \"feedback_modal\",\n  ScanModal = \"scan_modal\",\n}\n\nexport enum Network {\n  FriendsPulling = \"contacts_pulling\",\n  RoomsPulling = \"rooms_pulling\",\n  ServerRequesting = \"server_requesting\",\n  ServerStarting = \"server_starting\",\n  BackendConnected = \"backend_connected\",\n  LoggingOut = \"logging_out\",\n  RobotRunning = \"robot_running\",\n}\n\nexport enum CookieKeys {\n  user = \"user\",\n  wechat = \"wechat\",\n}\n","import { PayloadUser, PayloadWxScan } from \"./interface\"\nimport moment from \"moment\"\nimport { Network, ScanStatus, Visibility } from \"./enums\"\n\nexport const USER: PayloadUser = {\n  username: \"\",\n  hasLogined: false,\n  remember: true,\n  deadTime: moment().add(7, \"d\").toDate(),\n}\n\nexport const APP_NAME = \"小成时光屋\"\n\nexport const WX_SCAN: PayloadWxScan = {\n  status: ScanStatus.Unknown,\n  qrcode: \"\",\n}\n\nexport const WX_SELF = {\n  _id: \"\",\n  id: \"\",\n  friend: true,\n  gender: 0,\n  type: 0,\n  phone: [],\n  alias: \"\",\n  avatar: \"\",\n  city: \"\",\n  name: \"\",\n  province: \"\",\n  signature: \"\",\n  weixin: \"\",\n}\n\nexport const STATUS = {\n  [Network.FriendsPulling]: false,\n  [Network.RoomsPulling]: false,\n  [Network.BackendConnected]: false,\n  [Network.ServerRequesting]: false,\n  [Network.ServerStarting]: false,\n  [Network.RobotRunning]: false,\n  [Visibility.FeedbackModal]: false,\n  [Visibility.LoginModal]: false,\n  [Visibility.ScanModal]: false,\n  [Network.LoggingOut]: false,\n}\n","// reference: https://github.com/microsoft/TypeScript/issues/17592\n\nexport enum EventSocket {\n  /**\n   * wechat\n   */\n  WX_SCAN = \"scan\",\n  WX_MESSAGE = \"message\",\n  WX_LOGIN = \"login\",\n  WX_LOGOUT = \"logout\",\n  WX_START = \"start\",\n  WX_STOP = \"stop\",\n  WX_FRIENDSHIP = \"friendship\",\n\n  /**\n   * socket-server\n   * 注意，连接是connected，断开是disconnect\n   */\n  SERVER_CONNECTION = \"connection\",\n  SERVER_CONNECT = \"connect\",\n  SERVER_DISCONNECT = \"disconnect\",\n  SERVER_PUSH_STATUS = \"server_status\",\n  SERVER_PUSH_USER_CHAT = \"user_message\",\n  SERVER_WECHAT_READY = \"server_wechat_ready\",\n\n  /**\n   * socket-client\n   */\n  CLIENT_REQUEST_SERVER = \"request_server\",\n  CLIENT_RELEASE_SERVER = \"request_server_logout_self\",\n  CLIENT_REPLACE_SERVER = \"request_server_logout_other\",\n  CLIENT_DAEMON_SERVER_OR_NOT = \"daemon_server\",\n  CLIENT_REFRESH_CONTACTS = \"request_contacts\",\n  CLIENT_SEND_USER_CHAT = \"push_user_message\",\n  CLIENT_SEND_WX_MESSAGE = \"send_message\",\n  CLIENT_SUBMIT_SETTINGS = \"submit_settings\",\n}\n\nexport enum EventHttp {\n  FETCH_FRIENDS = \"fetch_friends\",\n  FETCH_MORE_FRIENDS = \"fetch_more_friends\",\n  FETCH_MORE_FRIENDS_SUCCESS = \"fetch_more_friends_success\",\n  FETCH_FRIENDS_SUCCESS = \"fetch_friends_success\",\n  FETCH_FRIENDS_ERROR = \"fetch_friends_error\",\n  FETCH_FRIENDS_COUNT_SUCCESS = \"fetch_friends_count_success\",\n  FETCH_ROOMS_SUCCESS = \"fetch_rooms_success\",\n  FETCH_ROOMS_ERROR = \"fetch_rooms_error\",\n}\n\nexport enum EventBrowser {\n  SWITCH_STATUS = \"switch_status\",\n  UPDATE_USER = \"update_user\",\n}\n\nexport type ActionTypes = EventSocket | EventBrowser | EventHttp\n","import {\n  Actions,\n  CoreStatus,\n  PayloadRequestServer,\n  PayloadRunningStatus,\n  PayloadServerStatus,\n  PayloadSubmitSettings,\n  PayloadTypes,\n  PayloadUser,\n  PayloadUserChat,\n  PayloadWxContact,\n  PayloadWxMessage,\n  PayloadWxRoom,\n  PayloadWxScan,\n  PayloadWxSelf,\n  ServerItem,\n} from \"./DS/interface\"\nimport { applyMiddleware, createStore } from \"redux\"\nimport thunk from \"redux-thunk\"\nimport io from \"socket.io-client\"\nimport moment from \"moment\"\nimport { Code } from \"./DS/codes\"\nimport { Cookies } from \"react-cookie\"\nimport { $http } from \"./utils/$http\"\nimport { API, ParamsQueryWechatFriends, ParamsQueryWechatRooms } from \"./DS/API\"\nimport { APP_NAME, STATUS, USER, WX_SCAN, WX_SELF } from \"./DS/default\"\nimport { CookieKeys, Network, Visibility } from \"./DS/enums\"\nimport { ActionTypes, EventBrowser, EventHttp, EventSocket } from \"./DS/actions\"\n\nmoment.locale(\"zh-cn\")\nconst cookies = new Cookies()\n\nexport interface State {\n  appName: string\n  username: string\n  user: PayloadUser\n  userMessages: PayloadUserChat[]\n  status: CoreStatus\n  clients: number\n  servers: ServerItem[]\n  wxScan: PayloadWxScan\n  wxMessages: PayloadWxMessage[]\n  wxSelf: PayloadWxSelf\n  wxFriends: PayloadWxContact[]\n  wxFriendsCount: number\n  wxRooms: PayloadWxRoom[]\n}\n\n/**\n * Socket核心类\n */\nexport class CoreSocket {\n  private readonly appName = process.env.REACT_APP_NAME || APP_NAME\n  private readonly socket: SocketIOClient.Socket\n\n  // todo: 这个username到底是个啥啊，为什么不能直接从user中获取？\n  public username: string = \"\"\n  public user: PayloadUser = cookies.get(CookieKeys.user) || USER\n  public userMessages: PayloadUserChat[] = []\n\n  public wxSelf: PayloadWxSelf = cookies.get(CookieKeys.wechat) || WX_SELF\n  public wxScan: PayloadWxScan = WX_SCAN\n  public wxMessages: PayloadWxMessage[] = []\n  public wxFriends: PayloadWxContact[] = []\n  public wxFriendsCount: number = 0\n  public wxRooms: PayloadWxRoom[] = []\n\n  public clients: number = 0\n  public servers: ServerItem[] = []\n\n  public status: CoreStatus = STATUS\n\n  /**\n   * 定义导出状态\n   */\n  get state(): State {\n    return {\n      appName: this.appName,\n      username: this.username,\n      user: this.user,\n      clients: this.clients,\n      servers: this.servers,\n      wxScan: this.wxScan,\n      wxSelf: this.wxSelf,\n      wxFriends: this.wxFriends,\n      wxFriendsCount: this.wxFriendsCount,\n      wxRooms: this.wxRooms,\n      wxMessages: this.wxMessages,\n      userMessages: this.userMessages,\n      status: this.status,\n    }\n  }\n\n  constructor() {\n    /**\n     * 批量监听，浏览器函数无需入内\n     */\n    const socketAddress = process.env.REACT_APP_BACKEND_SOCKET\n    if (!socketAddress) throw new Error(\"server location not configured\")\n    console.log(\"connecting to \", socketAddress)\n    this.socket = io(socketAddress)\n    this.bindEvents()\n  }\n\n  private bindEvents = () => {\n    for (let eventSocket in EventSocket) {\n      if (EventSocket.hasOwnProperty(eventSocket)) {\n        console.log(`event -> ` + eventSocket)\n        // @ts-ignore\n        const e = EventSocket[eventSocket]\n        this.socket.on(e, (payload: PayloadTypes) => {\n          socketStore.dispatch({\n            type: e,\n            payload: payload,\n          })\n        })\n      }\n    }\n  }\n\n  public handleActions(\n    actionType: ActionTypes,\n    payload?: PayloadTypes,\n    callback?: (code: Code) => void\n  ) {\n    console.log(\"action: \", actionType)\n\n    switch (actionType) {\n      case EventSocket.SERVER_WECHAT_READY: {\n        this.status[Network.FriendsPulling] = true\n        this.fetchFriendsCount().then()\n        // this.fetchFriends().then()\n        this.fetchRooms().then()\n        break\n      }\n      case EventSocket.SERVER_CONNECTION: {\n        break\n      }\n      case EventSocket.SERVER_CONNECT: {\n        break\n      }\n      case EventSocket.SERVER_DISCONNECT: {\n        break\n      }\n      case EventSocket.CLIENT_REQUEST_SERVER: {\n        this.status[Network.ServerRequesting] = true\n        this.socket.emit(\n          EventSocket.CLIENT_REQUEST_SERVER,\n          payload as PayloadRequestServer,\n          (code: Code) => {\n            if (code === Code.SUCCESS) {\n              this.status[Network.ServerRequesting] = false\n              this.status[Network.ServerStarting] = true\n              console.log(\"server requested\")\n            }\n            if (callback) {\n              callback(code)\n            }\n          }\n        )\n        break\n      }\n      case EventSocket.CLIENT_RELEASE_SERVER: {\n        this.status = { ...this.status, [Network.LoggingOut]: true }\n        this.socket.emit(EventSocket.CLIENT_RELEASE_SERVER, (code: Code) => {\n          console.log(\"server released\")\n          this.status = { ...this.status, [Network.LoggingOut]: false }\n        })\n        break\n      }\n      case EventSocket.CLIENT_REPLACE_SERVER: {\n        // todo\n        this.socket.emit(EventSocket.CLIENT_REPLACE_SERVER)\n        break\n      }\n      case EventSocket.CLIENT_DAEMON_SERVER_OR_NOT: {\n        this.socket.emit(\n          EventSocket.CLIENT_DAEMON_SERVER_OR_NOT,\n          (code: Code) => {\n            console.log(\"切换托管状态完成\")\n          }\n        )\n        break\n      }\n      case EventSocket.CLIENT_SEND_USER_CHAT: {\n        this.socket.emit(EventSocket.CLIENT_SEND_USER_CHAT, payload)\n        break\n      }\n      case EventSocket.SERVER_PUSH_USER_CHAT: {\n        this.userMessages = [...this.userMessages, payload as PayloadUserChat]\n        break\n      }\n      case EventSocket.CLIENT_SEND_WX_MESSAGE: {\n        this.socket.emit(\n          EventSocket.CLIENT_SEND_WX_MESSAGE,\n          payload,\n          (code: Code) => {\n            if (callback) {\n              callback(code)\n            }\n          }\n        )\n        break\n      }\n      case EventSocket.SERVER_PUSH_STATUS: {\n        const { clients, servers } = payload as PayloadServerStatus\n        this.status[Network.BackendConnected] = true\n        this.clients = clients\n        this.servers = servers\n        break\n      }\n\n      case EventSocket.WX_SCAN: {\n        this.wxScan = payload as PayloadWxScan\n        this.status[Visibility.ScanModal] = true\n        break\n      }\n      case EventSocket.WX_LOGIN: {\n        this.user.hasLogined = true\n        this.wxSelf = payload as PayloadWxSelf\n        this.status[Visibility.ScanModal] = false\n        this.status[Network.ServerStarting] = false\n        this.status[Network.RobotRunning] = true\n        cookies.set(CookieKeys.wechat, this.wxSelf)\n        break\n      }\n      case EventSocket.WX_LOGOUT: {\n        this.status[Network.RobotRunning] = false\n        console.log(\"微信已下线\")\n        console.log({ payload })\n        break\n      }\n      case EventSocket.WX_MESSAGE: {\n        this.wxMessages = [...this.wxMessages, payload as PayloadWxMessage]\n        break\n      }\n\n      case EventBrowser.SWITCH_STATUS: {\n        const { key, toState } = payload as PayloadRunningStatus\n        if (toState === undefined)\n          this.status = {\n            ...this.status,\n            [key]: !this.status[key],\n          }\n        else this.status = { ...this.status, [key]: toState }\n        break\n      }\n      case EventBrowser.UPDATE_USER: {\n        this.user = { ...(payload as PayloadUser) }\n        if (this.user.remember) {\n          cookies.set(CookieKeys.user, this.user)\n        }\n        console.log(\"更新用户状态成功\")\n        break\n      }\n      case EventHttp.FETCH_FRIENDS: {\n        // todo: 由于对redux-thunk不是很熟悉，这个函数暂时没用上，\n        //  直接在BOT_LOGIN函数中处理了\n        break\n      }\n      case EventHttp.FETCH_FRIENDS_SUCCESS: {\n        this.wxFriends = payload as PayloadWxContact[]\n        this.status[Network.FriendsPulling] = false\n        console.log(\"拉取好友数据完成，数目: \", this.wxFriends.length)\n        break\n      }\n      case EventHttp.FETCH_FRIENDS_ERROR: {\n        console.log(\"拉取好友数据失败，报错如下\")\n        console.warn(payload)\n        break\n      }\n      case EventHttp.FETCH_FRIENDS_COUNT_SUCCESS: {\n        this.wxFriendsCount = payload as number\n        break\n      }\n      case EventHttp.FETCH_MORE_FRIENDS_SUCCESS: {\n        this.wxFriends = [...this.wxFriends, ...(payload as any)]\n        break\n      }\n      case EventHttp.FETCH_ROOMS_SUCCESS: {\n        this.wxRooms = payload as PayloadWxRoom[]\n        console.log(\"拉取群组数据完成，数目: \", this.wxRooms.length)\n        break\n      }\n      case EventHttp.FETCH_ROOMS_ERROR: {\n        console.log(\"拉取群组数据失败，报错如下：\")\n        console.warn(payload)\n        break\n      }\n      case EventSocket.WX_START: {\n        break\n      }\n      case EventSocket.WX_STOP: {\n        break\n      }\n      case EventSocket.WX_FRIENDSHIP: {\n        break\n      }\n      case EventSocket.CLIENT_REFRESH_CONTACTS: {\n        break\n      }\n      case EventSocket.CLIENT_SUBMIT_SETTINGS: {\n        this.socket.emit(\n          EventSocket.CLIENT_SUBMIT_SETTINGS,\n          payload as PayloadSubmitSettings,\n          (code: Code) => {\n            console.log({ code })\n          }\n        )\n        break\n      }\n      default:\n        break\n    }\n  }\n\n  private async fetchFriendsCount() {\n    // @ts-ignore\n    return socketStore.dispatch((dispatch: any) => {\n      $http\n        .get(API.wechat.contactsCount, { params: { wxid: this.wxSelf.id } })\n        .then(({ data }: any) => {\n          return dispatch({\n            type: EventHttp.FETCH_FRIENDS_COUNT_SUCCESS,\n            payload: data,\n          })\n        })\n    })\n  }\n\n  private async fetchFriends() {\n    console.log(\"正在拉取好友数据\")\n    const params: ParamsQueryWechatFriends = {\n      wxid: this.wxSelf.id,\n      skip: 0,\n      limit: 100,\n      onlyFriends: true,\n    }\n    // @ts-ignore\n    return socketStore.dispatch((dispatch) =>\n      $http\n        .get(API.wechat.friends, { params })\n        .then(({ data }: { data: any }) => {\n          dispatch({\n            type: EventHttp.FETCH_FRIENDS_SUCCESS,\n            payload: data as PayloadWxContact[],\n          })\n        })\n        .catch((err: any) => {\n          dispatch({\n            type: EventHttp.FETCH_FRIENDS_ERROR,\n            payload: err,\n          })\n        })\n    )\n  }\n\n  private async fetchRooms() {\n    console.log(\"正在拉取群数据\")\n    const params: ParamsQueryWechatRooms = {\n      wxid: this.wxSelf.id,\n      limit: 1000,\n    }\n    // @ts-ignore\n    return socketStore.dispatch((dispatch) =>\n      $http\n        .get(API.wechat.rooms, { params })\n        .then(({ data }: { data: any }) => {\n          dispatch({\n            type: EventHttp.FETCH_ROOMS_SUCCESS,\n            payload: data,\n          })\n        })\n        .catch((err) => {\n          dispatch({\n            type: EventHttp.FETCH_ROOMS_ERROR,\n            payload: err,\n          })\n        })\n    )\n  }\n}\n\nconst socketClass = new CoreSocket()\nconst SOCKET_STATE: State = socketClass.state\nconsole.log({ INITIALIZED_STORE: SOCKET_STATE })\n\n/**\n * 批量匹配\n * @param state\n * @param action\n */\nexport const reducer = (\n  state: State = SOCKET_STATE, // DEFAULT\n  action: Actions\n) => {\n  socketClass.handleActions(action.type, action.payload, action.callback)\n  return socketClass.state\n}\n\nconst socketStore = createStore(reducer, applyMiddleware(thunk))\nif (socketClass.user.hasLogined) {\n  socketStore.dispatch({\n    type: EventSocket.CLIENT_SEND_USER_CHAT,\n    payload: {\n      username: \"SYSTEM\",\n      content: `${socketClass.user.username}已上线`,\n      time: new Date(),\n    },\n  })\n}\nexport default socketStore\n","import { createFromIconfontCN } from \"@ant-design/icons\"\n\nconst IconJSUrl = \"//at.alicdn.com/t/font_2081653_t75v5p9r6ic.js\"\n\nconst MyIcon = createFromIconfontCN({\n  scriptUrl: IconJSUrl,\n  extraCommonProps: {\n    className: \"text-2xl\",\n  },\n})\n\nexport enum IconType {\n  PUPPET_WEB = \"icon-Web\",\n  PUPPET_MOBILE = \"icon-mobile\",\n  PUPPET_PAD = \"icon-pad\",\n  PUPPET_MAC = \"icon-mac\",\n  DOT_CONNECTED = \"icon-dot-connected\",\n  GENDER_FEMALE = \"icon-gender-female\",\n  GENDER_MALE = \"icon-gender-male\",\n  RIGHT = \"icon-right\",\n  WRONG = \"icon-wrong\",\n  COFFEE = \"icon-coffee\",\n  SUBMIT = \"icon-submit\",\n  WARNING = \"icon-warning\",\n}\n\nexport default MyIcon\n","import React from \"react\"\nimport socketStore from \"../../../store\"\n\nconst CompUser = () => {\n  const user = socketStore.getState().user\n  return (\n    <span className=\"inline-flex\">\n      {(user && user.username) || \"用户状态\"} ：\n      {(() => {\n        if (!user.hasLogined) {\n          return <p className=\"text-red-500\">未登录</p>\n        } else {\n          return <p className=\"text-green-500\">已登录</p>\n        }\n      })()}\n    </span>\n  )\n}\n\nexport default CompUser\n","import MyIcon, { IconType } from \"../../../utils/icons\"\nimport { Space, Spin } from \"antd\"\nimport { LoadingOutlined } from \"@ant-design/icons\"\nimport React from \"react\"\nimport { ServerItem } from \"../../../DS/interface\"\nimport { connect } from \"react-redux\"\nimport { State } from \"../../../store\"\n\nconst CompServers = (props: { servers: ServerItem[] }) => {\n  return (\n    <span className=\"inline-flex\">\n      {props.servers.length > 0 ? (\n        <span className=\"text-green-500 flex items-center\">\n          ONLINE <MyIcon type={IconType.DOT_CONNECTED} className=\"text-xl\" />\n        </span>\n      ) : (\n        <Space size=\"large\">\n          <span className=\"text-red-500\">CONNECTING</span>\n          <Spin indicator={<LoadingOutlined className=\"text-red-500\" spin />} />\n        </Space>\n      )}\n    </span>\n  )\n}\n\nexport default connect((state: State) => ({\n  servers: state.servers,\n}))(CompServers)\n","import React from \"react\"\nimport { connect } from \"react-redux\"\nimport { State } from \"../../../store\"\n\nexport interface CompClientsStates {\n  clients: number\n}\n\nconst CompClients = (props: CompClientsStates) => {\n  return <span>在线人数：{props.clients}</span>\n}\n\nexport default connect(\n  (state: State): CompClientsStates => ({\n    clients: state.clients,\n  })\n)(CompClients)\n","import CompUser from \"./CompUser\"\nimport { Divider } from \"antd\"\nimport CompServerStatus from \"./CompServers\"\nimport React from \"react\"\nimport CompUserCount from \"./CompClients\"\n\nconst CompStatus = () => {\n  console.log(\"rendered CompStatus\")\n  return (\n    <div className=\"w-full py-2 px-4 inline-flex items-center justify-center text-gray-500\">\n      {/* 用户状态 */}\n      <CompUser />\n\n      <Divider type=\"vertical\" />\n\n      <CompUserCount />\n\n      <Divider type=\"vertical\" />\n\n      {/* 服务器状态 */}\n      <CompServerStatus />\n    </div>\n  )\n}\n\nexport default CompStatus\n","import React from \"react\"\nimport CompStatus from \"./CompStatus\"\nimport VaseImg from \"../../../src/styles/images/vase-red.png\"\n\nconst CompFooter = () => {\n  console.log(\"rendered CompFooter\")\n\n  return (\n    <div className=\"w-full flex flex-col justify-center items-center\">\n      <img src={VaseImg} alt=\"vase\" className=\"w-16 m-auto hidden md:block\" />\n\n      <CompStatus />\n\n      <ul className=\"text-gray-500 text-center\">\n        <li>Powered By React, SocketIO, Wechaty</li>\n        <li>\n          Author:{\" \"}\n          <a\n            href={\"https://github.com/MarkShawn2020\"}\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            className=\"text-gray-500 underline\"\n          >\n            MarkShawn\n          </a>\n          , Date: 2020-09-18\n        </li>\n        <li>\n          Inspired and Specialized for{\" \"}\n          <span className=\"underline\">Cheng XingYu</span>\n        </li>\n      </ul>\n    </div>\n  )\n}\n\nexport default CompFooter\n","import {\n  Button,\n  Form,\n  Input,\n  message,\n  Modal,\n  notification,\n  Rate,\n  Space,\n} from \"antd\"\nimport TextArea from \"antd/es/input/TextArea\"\nimport React, { useState } from \"react\"\nimport { connect } from \"react-redux\"\nimport MyIcon, { IconType } from \"../../../utils/icons\"\nimport { FormInstance } from \"antd/es/form\"\nimport PayAli from \"../../../styles/images/支付宝收款.jpg\"\nimport PayWechat from \"../../../styles/images/微信收款.png\"\nimport { Visibility } from \"../../../DS/enums\"\nimport { State } from \"../../../store\"\nimport { PayloadUser } from \"../../../DS/interface\"\nimport { $http } from \"../../../utils/$http\"\nimport { API, ParamsFeedbackPost } from \"../../../DS/API\"\n\nconst FEEDBACK_MAIL_PLACEHOLDER = \"xxx@gmail.com\"\nconst FEEDBACK_TEXT_PLACEHOLDER = \"嘿，有什么需要改进的吗~\"\n\nexport interface CompFeedbackModalStates {\n  appName: string\n  visibility: boolean\n  user: PayloadUser\n}\n\nconst CompCoffee = () => {\n  return (\n    <div>\n      <div className=\"flex justify-around mb-4\">\n        <img src={PayAli} alt={\"支付宝收款码\"} className=\"w-48 h-64\" />\n        <img src={PayWechat} alt={\"微信收款码\"} className=\"w-48 h-64\" />\n      </div>\n\n      <div className=\"text-center text-lg text-gray-700 mb-4\">\n        <p>给我一杯咖啡，我就能满足您的一个愿望。</p>\n\n        <p className=\"italic\">A Cup of Coffee, A Mr. Meeseeks.</p>\n      </div>\n    </div>\n  )\n}\n\nexport interface CompFeedbackFormProps {\n  onFinishForm: (v: any) => void\n  feedback: FormInstance\n}\n\nconst CompFeedbackForm = (props: CompFeedbackFormProps) => {\n  return (\n    <Form\n      id={\"feedbackForm\"}\n      labelCol={{ span: 6 }}\n      onFinish={props.onFinishForm}\n      initialValues={{ rate: 5 }}\n      form={props.feedback}\n    >\n      <Form.Item label=\"Rate\" name=\"rate\" valuePropName=\"defaultValue\">\n        <Rate />\n      </Form.Item>\n\n      <Form.Item\n        label=\"Content\"\n        name=\"content\"\n        rules={[{ required: true, message: \"反馈消息必填哦！\" }]}\n      >\n        <TextArea rows={2} placeholder={FEEDBACK_TEXT_PLACEHOLDER} />\n      </Form.Item>\n\n      <Form.Item\n        label=\"E-Mail\"\n        name=\"email\"\n        rules={[\n          { required: true, message: \"留个联系方式呗！\" },\n          { type: \"email\", message: \"邮箱格式不合法哦！\" },\n        ]}\n        validateTrigger=\"onBlur\"\n      >\n        <Input placeholder={FEEDBACK_MAIL_PLACEHOLDER} />\n      </Form.Item>\n    </Form>\n  )\n}\n\nconst CompFeedbackModal = (props: CompFeedbackModalStates) => {\n  console.log(\"rendered CompUserFeedback\")\n\n  const [feedbackModalVisible, setFeedbackModalVisible] = useState(false)\n  const [feedback] = Form.useForm()\n  const [isSubmitMode, setIsSubmitMode] = useState(true)\n\n  const onOpenFeedbackModal = () => setFeedbackModalVisible(true)\n\n  const onCloseFeedbackModal = () => setFeedbackModalVisible(false)\n\n  const onFinishForm = (value: {\n    content: string\n    rate: number\n    email: string\n  }) => {\n    if (!props.user.hasLogined) {\n      message.error({ content: \"该功能需要登录才可使用\" })\n      return\n    }\n    const data: ParamsFeedbackPost = {\n      content: value.content,\n      email: value.email,\n      rate: value.rate,\n      time: new Date(),\n      username: props.user.username,\n    }\n    $http\n      .post(API.service.feedback, data)\n      .then(({ data }) => {\n        if (data.insertedCount === 1) {\n          notification.success({\n            message: \"反馈结果\",\n            description: `反馈收到，使命必达！`,\n          })\n        } else {\n          notification.warn({\n            message: \"反馈结果\",\n            description: \"未能成功反馈\",\n          })\n        }\n      })\n      .catch((err) => {\n        notification.error({\n          message: \"反馈结果\",\n          description: \"反馈异常\",\n        })\n      })\n    onCloseFeedbackModal()\n    feedback.resetFields()\n  }\n\n  return (\n    <div>\n      <div onClick={onOpenFeedbackModal}>Feedback</div>\n\n      <Modal\n        visible={feedbackModalVisible}\n        title={props.appName + \"使用反馈 ^_^\"}\n        okButtonProps={{ htmlType: \"submit\" }}\n        footer={null}\n        onCancel={onCloseFeedbackModal}\n      >\n        {isSubmitMode ? (\n          <CompFeedbackForm onFinishForm={onFinishForm} feedback={feedback} />\n        ) : (\n          <CompCoffee />\n        )}\n\n        <div className=\"flex justify-end items-center\">\n          <Space>\n            <Button\n              type=\"primary\"\n              size=\"middle\"\n              className=\"inline-flex items-center\"\n              icon={<MyIcon type={IconType.COFFEE} className=\"text-base\" />}\n              onClick={() => setIsSubmitMode(!isSubmitMode)}\n            >\n              Coffee\n            </Button>\n\n            {/* reference: [Submit form from external button (Form in Modal) · Issue #9380 · ant-design/ant-design](https://github.com/ant-design/ant-design/issues/9380) */}\n            <Button\n              type=\"primary\"\n              size=\"middle\"\n              className=\"inline-flex items-center\"\n              icon={<MyIcon type={IconType.SUBMIT} className=\"text-base\" />}\n              form=\"feedbackForm\"\n              htmlType={\"submit\"}\n              key=\"submit\"\n            >\n              Submit\n            </Button>\n          </Space>\n        </div>\n      </Modal>\n    </div>\n  )\n}\n\nexport default connect(\n  (state: State): CompFeedbackModalStates => ({\n    appName: state.appName,\n    visibility: state.status[Visibility.FeedbackModal],\n    user: state.user,\n  })\n)(CompFeedbackModal)\n","import CryptoJS from \"crypto-js\"\n// react自带解析.env文件\n\nif (!process.env.REACT_APP_AES_KEY || !process.env.REACT_APP_AES_IV) {\n  console.log(process.env)\n  throw new Error(\n    \"必须配置AES_KEY 和 AES_IV，可以通过 `openssl rand -r 16` 生成\"\n  )\n}\nconst key: string = CryptoJS.enc.Utf8.parse(process.env.REACT_APP_AES_KEY)\nconst iv: string = CryptoJS.enc.Utf8.parse(process.env.REACT_APP_AES_IV)\n\nexport const encodeAES = (data: string) => {\n  return CryptoJS.AES.encrypt(data, key, {\n    iv: iv,\n    mode: CryptoJS.mode.CBC,\n    padding: CryptoJS.pad.Pkcs7,\n  }).toString()\n}\n","import React, { Dispatch, useState } from \"react\"\nimport { Button, Checkbox, Form, Input, message, Spin } from \"antd\"\nimport { useCookies } from \"react-cookie\"\nimport {\n  Actions,\n  PayloadUserChat,\n  UserLogin,\n  UserRegister,\n} from \"../../../DS/interface\"\nimport { API } from \"../../../DS/API\"\nimport { Code } from \"../../../DS/codes\"\nimport { encodeAES } from \"../../../utils/secret\"\nimport $http from \"../../../utils/$http\"\nimport { LockOutlined, UserOutlined } from \"@ant-design/icons\"\nimport socketStore from \"../../../store\"\nimport moment from \"moment\"\nimport { EventBrowser, EventSocket } from \"../../../DS/actions\"\nimport { connect } from \"react-redux\"\n\nexport interface CompLoginFormProps {\n  onCloseLoginModal: () => void\n}\n\nexport interface CompLoginFormDispatch {\n  sendWelcomeChat: (payload: PayloadUserChat) => void\n}\n\nconst CompLoginForm = (props: CompLoginFormProps & CompLoginFormDispatch) => {\n  const [isLoginMode, setIsLoginModel] = useState(true)\n  const [waiting, setWaiting] = useState<boolean>(false)\n  const [form] = Form.useForm()\n\n  /**\n   * 账户密码信息应该由浏览器自己加载，而cookie存储我们的user数据，这两个概念不同\n   */\n  const [, setCookie] = useCookies()\n\n  const onRegister = async (userData: UserRegister) => {\n    setWaiting(true)\n    const dataEncoded = encodeAES(JSON.stringify(userData))\n    const { data } = await $http.post(API.account.register, { dataEncoded })\n    if (data === Code.SUCCESS) {\n      await $http.get(API.account.basic, {\n        params: { username: form.getFieldValue(\"username\") },\n      })\n      message.success({ content: \"注册成功，请用新账号登录！\" })\n      props.sendWelcomeChat({\n        username: \"SYSTEM\",\n        content: `一位新朋友：${userData.username}注册成功`,\n        time: new Date(),\n      })\n      setIsLoginModel(true)\n    } else {\n      message.error({ content: Code[data] })\n    }\n    setWaiting(false)\n  }\n\n  const onLogin = async (userData: UserLogin) => {\n    setWaiting(true)\n    const dataEncoded = encodeAES(JSON.stringify(userData))\n    const { data } = await $http.post(API.account.login, { dataEncoded })\n    if (data === Code.SUCCESS) {\n      const { data } = await $http.get(API.account.basic, {\n        params: { username: form.getFieldValue(\"username\") },\n      })\n      data.hasLogined = true\n\n      socketStore.dispatch({\n        type: EventBrowser.UPDATE_USER,\n        payload: data,\n      })\n      message.success({ content: \"登录成功\" })\n      props.sendWelcomeChat({\n        username: \"SYSTEM\",\n        content: `${userData.username}登录成功`,\n        time: new Date(),\n      })\n\n      props.onCloseLoginModal()\n    } else {\n      message.error({ content: Code[data] })\n    }\n    setWaiting(false)\n  }\n\n  const onSubmit = async (userData: UserLogin) => {\n    console.log({ userData })\n    if (isLoginMode) {\n      await onLogin(userData)\n    } else {\n      await onRegister(userData)\n    }\n  }\n\n  /**\n   * 通过在给from设置id，然后为button设置form、htmlType属性，以任意实现按钮点击提交表单数据的功能\n   * 可以参见：https://github.com/ant-design/ant-design/issues/9380\n   **/\n  return (\n    <Form\n      id={\"loginForm\"}\n      form={form}\n      name=\"normal_login\"\n      className=\"login-form\"\n      initialValues={{ remember: true }}\n      onFinish={onSubmit}\n    >\n      <Form.Item\n        name=\"username\"\n        rules={[\n          {\n            required: true,\n            message: \"Please input your Username!\",\n          },\n        ]}\n      >\n        <Input\n          prefix={<UserOutlined className=\"site-form-item-icon\" />}\n          placeholder=\"Username\"\n        />\n      </Form.Item>\n\n      {/* 密码 */}\n      <Form.Item\n        name=\"password\"\n        rules={[{ required: true, message: \"Please input your Password!\" }]}\n      >\n        <Input\n          prefix={<LockOutlined className=\"site-form-item-icon\" />}\n          type=\"password\"\n          placeholder=\"Password\"\n        />\n      </Form.Item>\n\n      {/* 密码确认，仅注册可见*/}\n      {!isLoginMode && (\n        <Form.Item\n          name=\"password_confirm\"\n          dependencies={[\"password\"]}\n          rules={[\n            { required: true, message: \"Please confirm your Password!\" },\n            ({ getFieldValue }) => ({\n              validator(rule, value) {\n                if (!value || getFieldValue(\"password\") === value) {\n                  return Promise.resolve()\n                }\n                return Promise.reject(\"password do not match!\")\n              },\n            }),\n          ]}\n        >\n          <Input\n            prefix={<LockOutlined className=\"site-form-item-icon\" />}\n            type=\"password\"\n            placeholder=\"Password_confirm\"\n          />\n        </Form.Item>\n      )}\n\n      {/* 记住密码 */}\n      <Form.Item\n        name=\"remember\"\n        valuePropName=\"checked\"\n        noStyle\n        style={{ float: \"left\" }}\n      >\n        <Checkbox>Remember me</Checkbox>\n      </Form.Item>\n\n      {/* 忘记密码 */}\n      {/*{isLoginMode && (*/}\n      {/*  <Form.Item className=\"\">*/}\n      {/*    <a className=\"login-form-forgot float-right\" href=\"\">*/}\n      {/*      Forgot password*/}\n      {/*    </a>*/}\n      {/*  </Form.Item>*/}\n      {/*)}*/}\n\n      {/* 点击登录/注册 */}\n      <Form.Item>\n        <Button\n          size=\"middle\"\n          type=\"primary\"\n          className=\"login-form-button w-full my-2\"\n          form={\"loginForm\"}\n          htmlType=\"submit\"\n          key={\"submit\"}\n        >\n          {waiting ? <Spin /> : isLoginMode ? \"登录\" : \"注册\"}\n        </Button>\n      </Form.Item>\n\n      {/* 切换登录 / 注册模式 */}\n      {isLoginMode ? (\n        <div>\n          没有账号？{\" \"}\n          <Button\n            type=\"text\"\n            className=\"text-pink-500\"\n            onClick={() => {\n              setIsLoginModel(false)\n              form.resetFields()\n            }}\n          >\n            立即注册\n          </Button>\n        </div>\n      ) : (\n        <div>\n          已有账号？{\" \"}\n          <Button\n            type=\"text\"\n            className=\"text-pink-500\"\n            onClick={() => setIsLoginModel(true)}\n          >\n            立即登录\n          </Button>\n        </div>\n      )}\n    </Form>\n  )\n}\n\nexport default connect(\n  null,\n  (dispatch: Dispatch<Actions>): CompLoginFormDispatch => ({\n    sendWelcomeChat: (payload: PayloadUserChat) =>\n      dispatch({\n        type: EventSocket.CLIENT_SEND_USER_CHAT,\n        payload: payload,\n      }),\n  })\n)(CompLoginForm)\n","import { Button, Modal } from \"antd\"\nimport { connect } from \"react-redux\"\nimport React, { Dispatch, useState } from \"react\"\n\nimport CompLoginForm from \"./CompLoginForm\"\nimport { Actions, PayloadUser } from \"../../../DS/interface\"\nimport { Visibility } from \"../../../DS/enums\"\nimport { State } from \"../../../store\"\nimport { EventBrowser } from \"../../../DS/actions\"\n\nexport interface CompLoginModalProps {\n  appName: string\n  user: PayloadUser\n  visibility: boolean\n}\n\nexport interface CompLoginModalDispatch {\n  updateUserLogout: (user: PayloadUser) => void\n}\n\nexport const CompUserLoginModal = (\n  props: CompLoginModalProps & CompLoginModalDispatch\n) => {\n  console.log(\"rendered CompUserLoginModal\")\n  const [loginModalVisible, setLoginModalVisible] = useState(false)\n\n  const onUserLogout = () =>\n    props.updateUserLogout({ ...props.user, hasLogined: false })\n\n  const onOpenLoginModal = () => setLoginModalVisible(true)\n\n  const onCloseLoginModal = () => setLoginModalVisible(false)\n\n  return (\n    <div>\n      <div onClick={onOpenLoginModal}>Login/Register</div>\n\n      <Modal\n        title={props.appName + `统一用户系统`}\n        footer={null}\n        visible={loginModalVisible}\n        onCancel={onCloseLoginModal}\n        width={400}\n      >\n        {props.user.hasLogined ? (\n          <div className=\"flex justify-center items-center flex-col\">\n            <h1 className=\"text-3xl font-semibold\">{props.user.username}</h1>\n            <br />\n            <Button\n              type=\"primary\"\n              danger\n              onClick={() => {\n                onCloseLoginModal()\n                onUserLogout()\n              }}\n            >\n              退出\n            </Button>\n          </div>\n        ) : (\n          <CompLoginForm onCloseLoginModal={onCloseLoginModal} />\n        )}\n      </Modal>\n    </div>\n  )\n}\n\nexport default connect(\n  (state: State): CompLoginModalProps => ({\n    appName: state.appName,\n    user: state.user,\n    visibility: state.status[Visibility.LoginModal],\n  }),\n  (dispatch: Dispatch<Actions>): CompLoginModalDispatch => ({\n    updateUserLogout: (user) =>\n      dispatch({\n        type: EventBrowser.UPDATE_USER,\n        payload: user,\n      }),\n  })\n)(CompUserLoginModal)\n","import { Collapse, Modal } from \"antd\"\nimport React from \"react\"\nimport { connect } from \"react-redux\"\nimport { State } from \"../../../store\"\nimport CollapsePanel from \"antd/es/collapse/CollapsePanel\"\nimport ShareGroup from \"../../../styles/images/小成时光屋.png\"\n\nexport interface CompIntroStates {\n  appName: string\n}\n\nexport const CompIntro = (props: CompIntroStates) => {\n  console.log(\"rendered CompIntro\")\n\n  const showIntro: any = () =>\n    Modal.info({\n      title: props.appName + \"使用说明~\",\n      className: \"p-0\",\n      content: (\n        <Collapse accordion>\n          <style jsx>{`\n            .ant-modal-confirm-content {\n              margin-left: 0 !important;\n              margin-top: 8px;\n            }\n          `}</style>\n\n          <CollapsePanel key={1} header={\"开发契机\"}>\n            <p>\n              本人微信作风严谨，常撤回误字错字，以致好友频频发问，为解此忧，特开发此项目，原只为撤回监控之用。\n            </p>\n          </CollapsePanel>\n\n          <CollapsePanel key={2} header={\"技术背景\"}>\n            <p>\n              1.\n              金融专业，爱好编程（华为前端研发在职），公众号南川笔记，擅长Python、TypeScript，前端主用React、Vue。\n            </p>\n            <p>\n              2.\n              曾经使用基于Python的itchat、wxpy等库实现了基于网页协议的微信机器人，本项目使用基于TypeScript的Wechaty库实现了基于Pad协议的微信机器人。\n            </p>\n            <p>\n              3. 当然是Pad协议更优了，基本不会封号，接近全部Pad端的实体机功能。\n            </p>\n          </CollapsePanel>\n\n          <CollapsePanel key={3} header={\"开发现状\"}>\n            <p>\n              目前已经完成了前端与后端的框架搭建，UI基本成型，已实现以下功能\n            </p>\n            <ul>\n              <li>1. 自动获取好友、群组列表，点击消息按钮即可快捷发送信息</li>\n              <li>2. 实时监控所有的消息（好友+群组），点击即可快捷回复</li>\n              <li>3. 支持实时聊天室功能，消息能够被打开该网友的所有人看到</li>\n              <li>\n                4. 支持服务器扩展，可以添加多个Wechaty的Token，实现多账号服务\n              </li>\n              <li>\n                5.\n                由于目前只有一个Token，因此用户需要轮流使用，基于此实现了下线、托管、踢线等功能\n              </li>\n            </ul>\n          </CollapsePanel>\n\n          <CollapsePanel key={4} header={\"项目TODO\"}>\n            <p>\n              1. 本项目原则上不做商用，毕竟没有大量token，且存在一定的监管风险\n            </p>\n            <p>\n              2. 但本项目能很好地锻炼自己的开发能力，包括对react、socket等的熟悉\n            </p>\n            <p>\n              3.\n              近期可能会陆续扩展的功能，主要就是一些交互优化与\"服务订阅\"，也欢迎后台留言反馈\n            </p>\n          </CollapsePanel>\n\n          <CollapsePanel key={5} header={\"隐私说明\"}>\n            <ol>\n              <li>\n                1.\n                本网站信息传输过程采用高级别的加密手段，您的信息可安全录入与存储\n              </li>\n\n              <li>\n                2.\n                本网站作为微信的第三方服务，建议不要传输过于敏感以及其他违反国家法律规定的信息\n              </li>\n\n              <li>\n                3.\n                本网站坚决不会使用或滥用用户的个人信息，包括存储、转发、非法交易，如有违反，可举报\n              </li>\n\n              <li>\n                4.\n                感谢您的支持，如需打赏或反馈可点击菜单按钮【Feedback】，谢谢！\n              </li>\n            </ol>\n          </CollapsePanel>\n\n          <CollapsePanel key={6} header={\"加入交流群\"}>\n            <img\n              src={ShareGroup}\n              alt={\"小成时光屋交流群\"}\n              className=\"mx-auto\"\n              style={{ width: \"200px\", height: \"300px\" }}\n            />\n          </CollapsePanel>\n        </Collapse>\n      ),\n    })\n\n  return (\n    <div onClick={showIntro}>\n      <p>Introduction</p>\n    </div>\n  )\n}\n\nexport default connect(\n  (state: State): CompIntroStates => {\n    return {\n      appName: state.appName,\n    }\n  }\n)(CompIntro)\n","import { Form, Input, message, Modal } from \"antd\"\nimport React, { useState } from \"react\"\nimport { connect } from \"react-redux\"\nimport { State } from \"../../../store\"\nimport { EventSocket } from \"../../../DS/actions\"\nimport { CoreStatus, PayloadSubmitSettings } from \"../../../DS/interface\"\nimport { Network } from \"../../../DS/enums\"\n\nexport interface CompSettingsStates {\n  appName: string\n  status: CoreStatus\n}\n\nexport interface CompSettingsDispatch {\n  submitSettings: (payload: PayloadSubmitSettings) => void\n}\n\nconst CompSettings = (props: CompSettingsStates & CompSettingsDispatch) => {\n  const [visible, setVisible] = useState(false)\n  const [form] = Form.useForm(null as any)\n\n  const openModal = () => {\n    setVisible(true)\n  }\n\n  const closeModal = () => {\n    setVisible(false)\n  }\n\n  const submit = () => {\n    if (!props.status[Network.RobotRunning]) {\n      message.error(\"该功能需要已申请并运行对应服务器方可使用！\")\n      return\n    }\n    console.log(form.getFieldsValue())\n    props.submitSettings(form.getFieldsValue())\n    closeModal()\n    message.success(\"新设置已生效！\")\n  }\n\n  return (\n    <div>\n      <div onClick={openModal}>Settings</div>\n\n      <Modal\n        visible={visible}\n        onCancel={closeModal}\n        onOk={submit}\n        title={`${props.appName}设置系统`}\n      >\n        <Form labelCol={{ span: 8 }} form={form}>\n          <Form.Item label={\"机器人前缀（无换行）\"} name={\"prefix\"}>\n            <Input placeholder={\"from robot: \"} />\n          </Form.Item>\n          <Form.Item label={\"机器人后缀（有换行）\"} name={\"suffix\"}>\n            <Input placeholder={\"from robot\"} />\n          </Form.Item>\n        </Form>\n      </Modal>\n    </div>\n  )\n}\n\nexport default connect(\n  (state: State): CompSettingsStates => ({\n    appName: state.appName,\n    status: state.status,\n  }),\n  (dispatch, ownProps): CompSettingsDispatch => ({\n    submitSettings: (payload) =>\n      dispatch({\n        type: EventSocket.CLIENT_SUBMIT_SETTINGS,\n        payload,\n      }),\n  })\n)(CompSettings)\n","import { Menu } from \"antd\"\nimport React, { useState } from \"react\"\nimport CompFeedbackModal from \"./CompUserFeedback/CompFeedbackModal\"\nimport { connect } from \"react-redux\"\nimport { Dispatch } from \"redux\"\nimport CompLoginModal from \"./CompUserLogin\"\nimport CompIntro from \"./CompIntro/CompIntro\"\nimport CompSettings from \"./CompSettings/CompSettings\"\nimport { Actions, CoreStatus, PayloadRunningStatus } from \"../../DS/interface\"\nimport { State } from \"../../store\"\nimport { EventBrowser } from \"../../DS/actions\"\nimport VaseLogo from \"../../styles/images/vase-red.png\"\n\nexport interface CompHeaderProps {\n  appName: string\n  status: CoreStatus\n}\n\nexport interface CompHeaderDispatch {\n  switchStatus: (payload: PayloadRunningStatus) => void\n}\n\nconst CompHeader = (props: CompHeaderProps & CompHeaderDispatch) => {\n  console.log(\"rendered CompHeader\")\n\n  const [menuKey, setMenuKey] = useState(\"home\")\n\n  return (\n    <>\n      <img src={VaseLogo} alt=\"vase\" className=\"md:hidden w-8 h-8\" />\n      <h1 className=\"text-xl text-purple-600 hidden md:block\">\n        {props.appName}\n      </h1>\n\n      <Menu\n        mode={\"horizontal\"}\n        selectedKeys={[menuKey]}\n        className=\"no-underline hover:no-underline\"\n        style={{ background: \"transparent\" }}\n        onClick={(e) => setMenuKey(e.key.toString())}\n      >\n        {/*<Menu.Item key={\"home\"}>Home</Menu.Item>*/}\n\n        <Menu.Item key={\"intro\"}>\n          <CompIntro />\n        </Menu.Item>\n\n        <Menu.Item key={\"login\"}>\n          <CompLoginModal />\n        </Menu.Item>\n\n        <Menu.Item key={\"feedback\"}>\n          <CompFeedbackModal />\n        </Menu.Item>\n\n        <Menu.Item key={\"settings\"}>\n          <CompSettings />\n        </Menu.Item>\n      </Menu>\n    </>\n  )\n}\n\nexport default connect(\n  (state: State): CompHeaderProps => ({\n    appName: state.appName,\n    status: state.status,\n  }),\n  (dispatch: Dispatch<Actions>): CompHeaderDispatch => ({\n    switchStatus: (payload) =>\n      dispatch({\n        type: EventBrowser.SWITCH_STATUS,\n        payload,\n      }),\n  })\n)(CompHeader)\n","import {\n  Actions,\n  CoreStatus,\n  PayloadUser,\n  ServerItem,\n} from \"../../../DS/interface\"\nimport { Button, message } from \"antd\"\nimport React, { Dispatch, useRef, useState } from \"react\"\nimport { ServerStatus } from \"../../../DS/enums\"\nimport { connect } from \"react-redux\"\nimport { State } from \"../../../store\"\nimport { EventSocket } from \"../../../DS/actions\"\nimport MyIcon, { IconType } from \"../../../utils/icons\"\nimport { Code } from \"../../../DS/codes\"\n\nexport interface CompRequestServerProps {\n  server: ServerItem\n}\n\nexport interface CompRequestServerStates {\n  user: PayloadUser\n  status: CoreStatus\n}\n\nexport interface CompServerDispatch {\n  requestServer: (user: PayloadUser, server: ServerItem) => void\n  releaseServer: () => void\n  replaceServer: () => void // todo: replaceServer\n}\n\nconst CompRequestServer = (\n  props: CompRequestServerStates & CompRequestServerProps & CompServerDispatch\n) => {\n  const [isLoading, setLoading] = useState(false)\n  const lastServerStatus = useRef(props.server.status)\n  if (props.server.status !== lastServerStatus.current) {\n    lastServerStatus.current = props.server.status\n    setLoading(false)\n  }\n\n  const rejectLogin = () => {\n    if (!props.user.hasLogined) {\n      return message.error({ content: \"该功能需要登录才可以使用！\" })\n    }\n  }\n\n  const onRequestServer = () => {\n    if (!rejectLogin()) {\n      setLoading(true)\n      props.requestServer(props.user, props.server)\n    }\n  }\n\n  const onReleaseServer = () => {\n    if (!rejectLogin()) props.releaseServer()\n  }\n\n  const onReplaceServer = () => {\n    if (!rejectLogin()) props.replaceServer()\n  }\n\n  if (props.server.status === ServerStatus.IDLE) {\n    return (\n      <Button type={\"primary\"} onClick={onRequestServer} loading={isLoading}>\n        申请\n      </Button>\n    )\n  }\n\n  if (props.server.username === props.user.username) {\n    return (\n      <Button type=\"primary\" danger onClick={onReleaseServer}>\n        下线\n      </Button>\n    )\n  }\n\n  return (\n    <Button\n      type=\"primary\"\n      danger\n      onClick={onReplaceServer}\n      className=\"inline-flex items-center\"\n    >\n      <MyIcon type={IconType.WARNING} className=\"text-xs\" /> 踢线\n    </Button>\n  )\n}\n\nexport default connect(\n  (state: State): CompRequestServerStates => ({\n    user: state.user,\n    status: state.status,\n  }),\n  (dispatch: Dispatch<Actions>): CompServerDispatch => ({\n    requestServer: (user, server) =>\n      dispatch({\n        type: EventSocket.CLIENT_REQUEST_SERVER,\n        payload: { user, server },\n        callback: (code) => {\n          if (code === Code.SUCCESS) {\n            message.success({ content: \"服务器启动成功！\" })\n          }\n        },\n      }),\n    releaseServer: () =>\n      dispatch({\n        type: EventSocket.CLIENT_RELEASE_SERVER,\n      }),\n    replaceServer: () =>\n      dispatch({\n        type: EventSocket.CLIENT_REPLACE_SERVER,\n      }),\n  })\n)(CompRequestServer)\n","import { ServerItem, PayloadUser, Actions } from \"../../../DS/interface\"\nimport { Button } from \"antd\"\nimport React, { Dispatch } from \"react\"\nimport { ServerStatus } from \"../../../DS/enums\"\nimport { connect } from \"react-redux\"\nimport { State } from \"../../../store\"\nimport { EventSocket } from \"../../../DS/actions\"\n\nexport interface CompServerDaemonProps {\n  user: PayloadUser\n  server: ServerItem\n}\n\nexport interface CompDaemonServerDispatch {\n  daemonServerDispatch: () => void\n}\n\nconst CompDaemonServer = (\n  props: CompServerDaemonProps & CompDaemonServerDispatch\n) => {\n  if (\n    props.user.hasLogined &&\n    props.server.status !== ServerStatus.IDLE &&\n    props.server.username === props.user.username\n  ) {\n    if (props.server.status !== ServerStatus.DAEMON) {\n      return (\n        <Button type=\"primary\" onClick={props.daemonServerDispatch}>\n          托管\n        </Button>\n      )\n    }\n    return (\n      <Button type=\"primary\" danger onClick={props.daemonServerDispatch}>\n        释放\n      </Button>\n    )\n  } else {\n    return <></>\n  }\n}\n\nexport default connect(\n  (state: State, props: any): CompServerDaemonProps => {\n    return {\n      user: state.user,\n      server: props.server,\n    }\n  },\n  (dispatch: Dispatch<Actions>): CompDaemonServerDispatch => ({\n    daemonServerDispatch: () =>\n      dispatch({\n        type: EventSocket.CLIENT_DAEMON_SERVER_OR_NOT,\n      }),\n  })\n)(CompDaemonServer)\n","import moment from \"moment\"\n\nmoment.defineLocale(\"zh-cn\", {\n  months: \"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月\".split(\n    \"_\"\n  ),\n  monthsShort: \"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月\".split(\"_\"),\n  weekdays: \"星期日_星期一_星期二_星期三_星期四_星期五_星期六\".split(\"_\"),\n  weekdaysShort: \"周日_周一_周二_周三_周四_周五_周六\".split(\"_\"),\n  weekdaysMin: \"日_一_二_三_四_五_六\".split(\"_\"),\n  longDateFormat: {\n    LT: \"Ah点mm分\",\n    LTS: \"Ah点m分s秒\",\n    L: \"YYYY-MM-DD\",\n    LL: \"YYYY年MMMD日\",\n    LLL: \"YYYY年MMMD日Ah点mm分\",\n    LLLL: \"YYYY年MMMD日ddddAh点mm分\",\n    l: \"YYYY-MM-DD\",\n    ll: \"YYYY年MMMD日\",\n    lll: \"YYYY年MMMD日Ah点mm分\",\n    llll: \"YYYY年MMMD日ddddAh点mm分\",\n  },\n  meridiemParse: /凌晨|早上|上午|中午|下午|晚上/,\n  meridiemHour: function (hour, meridiem) {\n    if (hour === 12) {\n      hour = 0\n    }\n    if (meridiem === \"凌晨\" || meridiem === \"早上\" || meridiem === \"上午\") {\n      return hour\n    } else if (meridiem === \"下午\" || meridiem === \"晚上\") {\n      return hour + 12\n    } else {\n      // '中午'\n      return hour >= 11 ? hour : hour + 12\n    }\n  },\n  meridiem: function (hour, minute, isLower) {\n    var hm = hour * 100 + minute\n    if (hm < 600) {\n      return \"凌晨\"\n    } else if (hm < 900) {\n      return \"早上\"\n    } else if (hm < 1130) {\n      return \"上午\"\n    } else if (hm < 1230) {\n      return \"中午\"\n    } else if (hm < 1800) {\n      return \"下午\"\n    } else {\n      return \"晚上\"\n    }\n  },\n  calendar: {\n    sameDay: function () {\n      return this.minutes() === 0 ? \"[今天]Ah[点整]\" : \"[今天]LT\"\n    },\n    nextDay: function () {\n      return this.minutes() === 0 ? \"[明天]Ah[点整]\" : \"[明天]LT\"\n    },\n    lastDay: function () {\n      return this.minutes() === 0 ? \"[昨天]Ah[点整]\" : \"[昨天]LT\"\n    },\n    nextWeek: function () {\n      var startOfWeek, prefix\n      startOfWeek = moment().startOf(\"week\")\n      prefix =\n        this.unix() - startOfWeek.unix() >= 7 * 24 * 3600 ? \"[下]\" : \"[本]\"\n      return this.minutes() === 0 ? prefix + \"dddAh点整\" : prefix + \"dddAh点mm\"\n    },\n    lastWeek: function () {\n      var startOfWeek, prefix\n      startOfWeek = moment().startOf(\"week\")\n      prefix = this.unix() < startOfWeek.unix() ? \"[上]\" : \"[本]\"\n      return this.minutes() === 0 ? prefix + \"dddAh点整\" : prefix + \"dddAh点mm\"\n    },\n    sameElse: \"LL\",\n  },\n  ordinalParse: /\\d{1,2}(日|月|周)/,\n  ordinal: function (number, period) {\n    switch (period) {\n      case \"d\":\n      case \"D\":\n      case \"DDD\":\n        return number + \"日\"\n      case \"M\":\n        return number + \"月\"\n      case \"w\":\n      case \"W\":\n        return number + \"周\"\n      default:\n        return number\n    }\n  },\n  relativeTime: {\n    future: \"%s内\",\n    past: \"%s前\",\n    s: \"几秒\",\n    m: \"1 分钟\",\n    mm: \"%d 分钟\",\n    h: \"1 小时\",\n    hh: \"%d 小时\",\n    d: \"1 天\",\n    dd: \"%d 天\",\n    M: \"1 个月\",\n    MM: \"%d 个月\",\n    y: \"1 年\",\n    yy: \"%d 年\",\n  },\n  week: {\n    // GB/T 7408-1994《数据元和交换格式·信息交换·日期和时间表示法》与ISO 8601:1988等效\n    dow: 1, // Monday is the first day of the week.\n    doy: 4, // The week that contains Jan 4th is the first week of the year.\n  },\n})\n\nexport const MyMoment = moment\nexport default MyMoment\n","import { ServerItem } from \"../../../DS/interface\"\nimport { TokenType, ServerStatus } from \"../../../DS/enums\"\nimport { Avatar, Card, Space, Table, Tag } from \"antd\"\nimport React from \"react\"\nimport { UserOutlined } from \"@ant-design/icons\"\nimport MyIcon, { IconType } from \"../../../utils/icons\"\nimport CompRequestServer from \"./CompRequestServer\"\nimport CompServerDaemon from \"./CompDaemonServer\"\nimport moment from \"../../../utils/moment\"\nimport { connect } from \"react-redux\"\nimport { State } from \"../../../store\"\n\nexport interface CompServersStates {\n  servers: ServerItem[]\n  clients: number\n}\n\nconst CompServers = (props: CompServersStates) => {\n  console.log(`rendered CompServers`)\n\n  const serversTableColumns = [\n    {\n      title: \"昵称\",\n      dataIndex: \"username\",\n      render: (text: string, record: ServerItem) => {\n        return (\n          <Space>\n            <Avatar\n              src={record.avatar}\n              icon={<UserOutlined className=\"text-2xl\" />}\n            />\n            {text ? <p>{text}</p> : <p className=\"text-gray-500\">No One</p>}\n          </Space>\n        )\n      },\n    },\n\n    {\n      title: \"类型\",\n      dataIndex: \"tokenType\",\n      render: (text: TokenType) => {\n        switch (text) {\n          case TokenType.MOBILE:\n            return <MyIcon type={IconType.PUPPET_MOBILE} className=\"text-2xl\" />\n          case TokenType.PAD:\n            return <MyIcon type={IconType.PUPPET_PAD} className=\"text-2xl\" />\n          case TokenType.WEB:\n            return <MyIcon type={IconType.PUPPET_WEB} className=\"text-2xl\" />\n        }\n      },\n    },\n    {\n      title: \"免费\",\n      dataIndex: \"isFree\",\n      render: (isFree: boolean) => {\n        return <MyIcon type={isFree ? IconType.RIGHT : IconType.WRONG} />\n      },\n    },\n    {\n      title: \"状态\",\n      dataIndex: \"status\",\n      render: (status: ServerStatus) => {\n        switch (status) {\n          case ServerStatus.IDLE: {\n            return <Tag color=\"blue\">空闲</Tag>\n          }\n          case ServerStatus.CONNECTING: {\n            return <Tag color=\"orange\">启动中</Tag>\n          }\n          case ServerStatus.RUNNING: {\n            return <Tag color=\"green\">运行中</Tag>\n          }\n          case ServerStatus.DAEMON: {\n            return <Tag color=\"magenta\">托管中</Tag>\n          }\n          case ServerStatus.ERROR: {\n            return <Tag color={\"red\"}>异常</Tag>\n          }\n          default: {\n            throw new Error()\n          }\n        }\n      },\n    },\n    {\n      title: \"最近使用\",\n      dataIndex: \"lastTime\",\n      render: (text: Date) => {\n        // console.log({ lastTime: text })\n        if (text) {\n          return <p>{moment(text).fromNow()}</p>\n        } else {\n          return \"-\"\n        }\n      },\n    },\n    {\n      title: \"操作\",\n      key: \"apply\",\n      render: (text: string, server: ServerItem) => {\n        return (\n          <Space>\n            <CompRequestServer server={server} />\n\n            <CompServerDaemon server={server} />\n          </Space>\n        )\n      },\n    },\n  ]\n\n  return (\n    <Card title={\"服务器\"} bodyStyle={{ padding: 0 }}>\n      <Table\n        columns={serversTableColumns}\n        dataSource={props.servers.map((server) => {\n          // @ts-ignore\n          server.key = server.token\n          return server\n        })}\n        pagination={false}\n      />\n    </Card>\n  )\n}\n\nexport default connect(\n  (state: State): CompServersStates => {\n    return {\n      servers: state.servers,\n      clients: state.clients,\n    }\n  }\n)(CompServers)\n","import {\n  PayloadClientSendMessage,\n  PayloadWxMessage,\n} from \"../../../DS/interface\"\nimport React, { useRef, useState } from \"react\"\nimport { Avatar, Input, message, Popover } from \"antd\"\nimport MyMoment from \"../../../utils/moment\"\nimport { connect } from \"react-redux\"\nimport { EventSocket } from \"../../../DS/actions\"\nimport { Code } from \"../../../DS/codes\"\n\nexport interface CompWechatyMessageItemProps {\n  msg: PayloadWxMessage\n}\n\nexport interface CompWechatyMessageItemDispatch {\n  sendMessage: (\n    payload: PayloadClientSendMessage,\n    callback?: (code: Code) => void\n  ) => void\n}\n\nconst CompWechatyMessageItem = (\n  props: CompWechatyMessageItemProps & CompWechatyMessageItemDispatch\n) => {\n  const name = props.msg.from.alias || props.msg.from.name\n  const [popupVisible, setPopupVisible] = useState(false)\n  const replyRef = useRef(null as any)\n\n  const reply = (s: string) => {\n    const isRoom = props.msg.roomID !== null\n    const msgPayload: PayloadClientSendMessage = {\n      content: s,\n      time: new Date(),\n      toID: isRoom ? props.msg.roomID : props.msg.from.id,\n      isRoom: isRoom,\n    }\n    console.log(\"reply: \", s)\n    props.sendMessage(msgPayload, (code: Code) => {\n      if (code === Code.SUCCESS) {\n        message.success({ content: \"回复成功！\" })\n      } else {\n        message.error({ content: \"回复失败\" })\n      }\n    })\n    setPopupVisible(false)\n  }\n\n  return (\n    <Popover\n      visible={popupVisible}\n      onVisibleChange={(v) => setPopupVisible(v)}\n      trigger=\"click\"\n      placement=\"top\"\n      content={\n        <Input.Search\n          ref={replyRef}\n          autoFocus\n          placeholder={`To ${name}: `}\n          enterButton={\"回复\"}\n          onSearch={reply}\n        />\n      }\n      title={\"快捷回复\"}\n      className=\"list\"\n    >\n      <div className=\"relative flex justify-between items-start w-full\">\n        <div className=\"avatar mr-4\">\n          <Avatar src={props.msg.from.avatar} />\n        </div>\n        <div className=\"rows flex-1\">\n          <div className=\"row-1 inline-flex justify-between items-center w-full\">\n            <div className=\"inline-flex\">\n              <p className=\"username text-gray-800\">{props.msg.from.name}</p>\n\n              {props.msg.from.alias && (\n                <p className=\"text-gray-700\">（{props.msg.from.alias}）</p>\n              )}\n            </div>\n\n            <div className=\"content text-gray-600\">\n              {MyMoment(props.msg.time).fromNow()}\n            </div>\n          </div>\n\n          <div className=\"row-2\">\n            <p className=\"text-black text-sm break-words\">\n              {props.msg.content}\n            </p>\n          </div>\n        </div>\n      </div>\n    </Popover>\n  )\n}\n\nexport const CompWechatyMessageContainer = connect(\n  null,\n  (dispatch, ownProps): CompWechatyMessageItemDispatch => ({\n    sendMessage: (payload, callback) => {\n      dispatch({\n        type: EventSocket.CLIENT_SEND_WX_MESSAGE,\n        payload,\n        callback,\n      })\n    },\n  })\n)(CompWechatyMessageItem)\n","import { Badge, Card, Divider, Empty } from \"antd\"\nimport React, { useEffect, useRef } from \"react\"\nimport { connect } from \"react-redux\"\nimport { PayloadWxMessage } from \"../../../DS/interface\"\nimport { CompWechatyMessageContainer } from \"./CompWechatyMessage\"\nimport { State } from \"../../../store\"\n\nconst CompWechatyMessages = (props: {\n  wechatyMessages: PayloadWxMessage[]\n}) => {\n  console.log(\"rendered CompWechatyMessages\")\n\n  const messagesRef = useRef(null as any)\n  const messageEndRef = useRef(null as any)\n\n  const MaxHeight = 400\n\n  useEffect(() => {\n    if (messagesRef.current && messageEndRef.current) {\n      if (messagesRef.current.offsetHeight >= MaxHeight) {\n        // reference: https://stackoverflow.com/questions/60289640/react-useref-scrollintoview-how-to-only-autoscroll-a-specific-div-inside-of\n        messageEndRef.current.scrollIntoView({\n          behavior: \"smooth\",\n          block: \"nearest\",\n          inline: \"start\",\n        })\n      }\n    }\n  })\n\n  return (\n    <Card title={\"实时消息\"}>\n      {props.wechatyMessages.length === 0 ? (\n        <Empty image={Empty.PRESENTED_IMAGE_SIMPLE} description={false} />\n      ) : (\n        <div\n          className=\"overflow-y-scroll break-words pr-4\"\n          style={{ maxHeight: MaxHeight + \"px\", minHeight: \"300px\" }}\n          ref={messagesRef}\n        >\n          {props.wechatyMessages.map((msg) => {\n            return (\n              <div key={msg.id} className=\"relative\">\n                <CompWechatyMessageContainer msg={msg} key={msg.id} />\n\n                <Badge\n                  status={msg.roomID ? \"default\" : \"success\"}\n                  style={{\n                    position: \"absolute\",\n                    left: \"4px\",\n                    top: \"4px\",\n                  }}\n                />\n\n                <Divider className=\"my-2\" />\n              </div>\n            )\n          })}\n\n          <div ref={messageEndRef} />\n        </div>\n      )}\n    </Card>\n  )\n}\n\nexport default connect((state: State) => ({\n  wechatyMessages: state.wxMessages,\n}))(CompWechatyMessages)\n","import { Button, Card, Divider, Empty, message, Modal } from \"antd\"\nimport TextArea from \"antd/es/input/TextArea\"\nimport React, { useEffect, useRef, useState } from \"react\"\nimport { connect } from \"react-redux\"\nimport { PayloadUser, PayloadUserChat } from \"../../../DS/interface\"\nimport { State } from \"../../../store\"\nimport { EventSocket } from \"../../../DS/actions\"\nimport MyMoment from \"../../../utils/moment\"\n\nexport interface CompUserChatsStates {\n  user: PayloadUser\n  userMessages: PayloadUserChat[]\n  clientCount: number\n}\n\nexport interface CompUserChatsDispatch {\n  sendUserChat: (userMessage: PayloadUserChat) => void\n}\n\nconst CompUserChats = (props: CompUserChatsStates & CompUserChatsDispatch) => {\n  console.log(\"rendered CompUserChats\")\n\n  const [inputMessage, setInputMessage] = useState(\"\")\n  const messageEndRef = useRef<HTMLDivElement>(null as any)\n  const messagesRef = useRef(null as any)\n  const enterTime = useRef(new Date())\n  const MaxHeight = 400\n\n  useEffect(() => {\n    if (!props.user.username) {\n      Modal.confirm({\n        title: \"初体验提示\",\n        content: (\n          <div>\n            <p>1. 浏览器每次刷新或打开，实时聊天室的内容都会重置哦</p>\n            <p>2. 注册登录之后就会记住你的信息啦~</p>\n            <p>\n              3.\n              登录后即可点击\"申请\"按钮扫码选择自己的机器人，请在PC页面上登录哦！（因为手机不好扫自己屏幕的码~）\n            </p>\n          </div>\n        ),\n      })\n    }\n  }, [])\n\n  useEffect(() => {\n    if (messageEndRef.current && messagesRef.current) {\n      if (messagesRef.current.offsetHeight >= MaxHeight) {\n        messageEndRef.current.scrollIntoView({\n          behavior: \"smooth\",\n          block: \"nearest\",\n        })\n      }\n    }\n  })\n\n  const sendUserMessage = () => {\n    if (!props.user.hasLogined) {\n      return message.warning({ content: \"需要先登陆才可以聊天哦！\" })\n    }\n    if (inputMessage === \"\") {\n      return message.warning({ content: \"您倒是输出呀！\" })\n    }\n    if (new Date().getTime() - enterTime.current.getTime() < 1000) {\n      return message.warning({ content: \"您的操作太快啦！\" })\n    }\n    const userMessage: PayloadUserChat = {\n      username: props.user.username,\n      content: inputMessage,\n      time: new Date(),\n    }\n    console.log(userMessage)\n    props.sendUserChat(userMessage)\n    setInputMessage(\"\")\n    enterTime.current = new Date()\n  }\n\n  return (\n    <Card title={`实时聊天室（${props.clientCount}）`}>\n      <div\n        className=\"chats-display\"\n        style={{ maxHeight: MaxHeight, overflow: \"scroll\" }}\n      >\n        {props.userMessages.length > 0 ? (\n          <div ref={messagesRef}>\n            {props.userMessages.map((msg: PayloadUserChat, index) => {\n              return (\n                <div key={index}>\n                  <div className=\"row-1 inline-flex justify-between items-center w-full\">\n                    <div className=\"inline-flex\">\n                      <p className=\"username text-black font-semibold\">\n                        @ {msg.username}\n                      </p>\n                    </div>\n\n                    <div className=\"content text-gray-600\">\n                      {MyMoment(msg.time).fromNow()}\n                    </div>\n                  </div>\n\n                  <div className=\"row-2\">\n                    <p className=\"text-gray-800 text-sm break-words pl-4\">\n                      {msg.content}\n                    </p>\n                  </div>\n\n                  {index !== props.userMessages.length - 1 && (\n                    <Divider className=\"my-2\" />\n                  )}\n                </div>\n              )\n            })}\n          </div>\n        ) : (\n          <Empty image={Empty.PRESENTED_IMAGE_SIMPLE} description={false} />\n        )}\n        <div ref={messageEndRef} />\n      </div>\n\n      <div>\n        <TextArea\n          autoSize={{ minRows: 3, maxRows: 6 }}\n          className=\"my-2 \"\n          value={inputMessage}\n          placeholder={\n            props.clientCount > 1\n              ? `当前有${props.clientCount}人在线哦，要不打声招呼pa？`\n              : \"你想说点什么吗~\"\n          }\n          onChange={(e) => {\n            setInputMessage(e.target.value)\n          }}\n        />\n      </div>\n\n      <div className=\"flex justify-end\">\n        <Button type=\"primary\" onClick={sendUserMessage}>\n          发送\n        </Button>\n      </div>\n    </Card>\n  )\n}\n\nexport default connect(\n  (state: State): CompUserChatsStates => ({\n    userMessages: state.userMessages,\n    clientCount: state.clients,\n    user: state.user,\n  }),\n  (dispatch): CompUserChatsDispatch => ({\n    sendUserChat: (userMessage: PayloadUserChat) => {\n      console.log(\"sending message\")\n      dispatch({\n        type: EventSocket.CLIENT_SEND_USER_CHAT,\n        payload: userMessage,\n      })\n    },\n  })\n)(CompUserChats)\n","import CompServers from \"./CompServers\"\nimport CompWechatyMessages from \"./CompWechatyMessages/CompWechatyMessages\"\nimport React from \"react\"\nimport CompUserChats from \"./CompUserChats\"\n\nexport const CompContent1 = () => {\n  console.log(\"rendered CompContent1\")\n\n  return (\n    <div className=\"w-full p-0 md:p-4 flex flex-col\">\n      <div className=\"order-2 my-4\">\n        <CompServers />\n      </div>\n\n      <div className=\"order-3 my-4\">\n        <CompWechatyMessages />\n      </div>\n\n      <div className=\"order-4 my-4\">\n        <CompUserChats />\n      </div>\n    </div>\n  )\n}\n\nexport default CompContent1\n","export const getRandomColor: () => string = () => {\n  return \"#\" + Math.floor(Math.random() * (2 << 23)).toString(16)\n}\n\nconst getRandomInt: () => number = () => {\n  return Math.floor(Math.random() * 7) + 3\n}\n\nexport const getRandomColorGentle: () => string = () => {\n  return \"#\" + Array.from(Array(6)).map(getRandomInt).join(\"\")\n}\n","import React from \"react\"\nimport { Card, message } from \"antd\"\nimport { getRandomColorGentle } from \"../../../utils/random\"\nimport { API, ServiceType } from \"../../../DS/API\"\nimport { $http } from \"../../../utils/$http\"\n\nexport interface ServiceItem {\n  title: string\n  key: ServiceType\n}\n\nexport const apiAddServicePost = async (serviceItem: ServiceItem) => {\n  await $http.post(API.service.add, { serviceType: serviceItem.key })\n  message.success({\n    content: `已收到您对【${serviceItem.title}】这项功能的的需求反馈，我们会尽快考虑的！`,\n  })\n}\n\nexport const CompServices = () => {\n  const services: ServiceItem[] = [\n    {\n      title: \"撤回监控\",\n      key: ServiceType.Recall,\n    },\n    {\n      title: \"定时提醒\",\n      key: ServiceType.Timing,\n    },\n    {\n      title: \"消息备份\",\n      key: ServiceType.Backup,\n    },\n    {\n      title: \"头像墙\",\n      key: ServiceType.Avatar,\n    },\n    {\n      title: \"社交圈\",\n      key: ServiceType.Network,\n    },\n  ]\n\n  return (\n    <Card title=\"服务订阅\">\n      <div className=\"flex justify-around flex-wrap\">\n        {services.map((item: ServiceItem) => {\n          return (\n            <div\n              key={item.key}\n              className=\"w-16 h-16 m-1 rounded text-white flex justify-center items-center flex-wrap text-base px-4 box-border text-center hover:cursor-pointer\"\n              style={{\n                backgroundColor: getRandomColorGentle(),\n                cursor: \"pointer\",\n              }}\n              onClick={() => apiAddServicePost(item)}\n            >\n              <p>{item.title}</p>\n            </div>\n          )\n        })}\n      </div>\n    </Card>\n  )\n}\n\nexport default CompServices\n","import { Avatar, Button, List, message, Popover } from \"antd\"\nimport Search from \"antd/es/input/Search\"\nimport { MessageOutlined } from \"@ant-design/icons\"\nimport React, { useState } from \"react\"\nimport {\n  PayloadClientSendMessage,\n  PayloadWxContact,\n  PayloadWxRoom,\n} from \"../../../DS/interface\"\nimport { connect } from \"react-redux\"\nimport { EventSocket } from \"../../../DS/actions\"\nimport { Code } from \"../../../DS/codes\"\n\nexport interface CompWxBasicObjectProps {\n  item: PayloadWxContact & PayloadWxRoom\n}\n\nexport interface CompWxBasicObjectDispatch {\n  sendMessage: (\n    msg: PayloadClientSendMessage,\n    callback: (code: Code) => void\n  ) => void\n}\n\nexport const CompWxBasicObject = (\n  props: CompWxBasicObjectProps & CompWxBasicObjectDispatch\n) => {\n  const [replyVisible, setReplyVisible] = useState(false)\n\n  const sendMessage = (v: string) => {\n    props.sendMessage(\n      {\n        time: new Date(),\n        toID: props.item.id,\n        isRoom: Boolean(props.item.topic),\n        content: v,\n      },\n      (code: Code) => {\n        if (code === Code.SUCCESS) {\n          message.success({ content: \"发送成功\" })\n        } else {\n          message.error({ content: \"发送失败\" })\n        }\n      }\n    )\n    setReplyVisible(false)\n  }\n\n  return (\n    <List.Item\n      key={props.item.id}\n      actions={[\n        <Popover\n          placement=\"topRight\"\n          visible={replyVisible}\n          trigger=\"click\"\n          onVisibleChange={(v) => setReplyVisible(v)}\n          content={<Search enterButton={\"消息发送\"} onSearch={sendMessage} />}\n        >\n          <Button type=\"text\" onClick={() => setReplyVisible(true)}>\n            <MessageOutlined />\n          </Button>\n        </Popover>,\n      ]}\n      className=\"list\"\n    >\n      <List.Item.Meta\n        avatar={\n          <Popover\n            content={\n              <img\n                src={props.item.avatar}\n                alt={props.item.name || props.item.topic}\n                style={{ width: \"160px\", height: \"160px\", opacity: \"90%\" }}\n              />\n            }\n            placement=\"top\"\n            trigger=\"click\"\n          >\n            <div className=\"relative\">\n              <Avatar src={props.item.avatar} className=\"avatar\" />\n              <Avatar\n                src={props.item.avatar}\n                className=\"avatar-blur absolute top-0 left-0\"\n              />\n            </div>\n          </Popover>\n        }\n        title={\n          props.item.name || `${props.item.topic}（${props.item.members}）`\n        }\n        description={props.item.alias}\n      />\n    </List.Item>\n  )\n}\n\nexport default connect(\n  null,\n  (dispatch): CompWxBasicObjectDispatch => ({\n    sendMessage: (payload: PayloadClientSendMessage) =>\n      dispatch({\n        type: EventSocket.CLIENT_SEND_WX_MESSAGE,\n        payload: payload,\n      }),\n  })\n)(CompWxBasicObject)\n","import CompWxBasicObject from \"./CompWxBasicObject\"\nimport { PayloadWxContact, PayloadWxRoom } from \"../../../DS/interface\"\nimport { Card, Skeleton, Spin } from \"antd\"\nimport React, { useRef, useState } from \"react\"\nimport InfiniteScroll from \"react-infinite-scroller\"\nimport { $http } from \"../../../utils/$http\"\nimport { API } from \"../../../DS/API\"\nimport { connect } from \"react-redux\"\nimport { State } from \"../../../store\"\nimport { EventHttp } from \"../../../DS/actions\"\n\nexport interface CompWxBasicObjectsStates {\n  wxid: string\n}\n\nexport interface CompWxBasicObjectsProps {\n  items: (PayloadWxContact & PayloadWxRoom)[]\n  itemsCount: number\n  title: string\n}\n\nexport interface CompWxBasicObjectsDispatch {\n  pushMoreFriends: (payload: PayloadWxContact[]) => void\n}\n\nexport const CompWxBasicObjects = (\n  props: CompWxBasicObjectsProps &\n    CompWxBasicObjectsStates &\n    CompWxBasicObjectsDispatch\n) => {\n  const [isPulling] = useState(false)\n  const skipRef = useRef(0)\n  console.log(\"rendered \" + props.title)\n\n  const loadMore = () => {\n    const api = props.title.includes(\"群\")\n      ? API.wechat.rooms\n      : API.wechat.friends\n    $http\n      .get(api, { params: { wxid: props.wxid, skip: skipRef.current } })\n      .then(({ data }: any) => {\n        skipRef.current += 100\n        props.pushMoreFriends(data)\n      })\n      .catch((err) => {\n        console.log({ err })\n      })\n  }\n\n  return (\n    <Card\n      title={props.title}\n      bodyStyle={{ padding: 0, maxHeight: \"300px\", overflow: \"scroll\" }}\n      extra={\n        <p>\n          ({props.items.length} / {props.itemsCount})\n        </p>\n      }\n    >\n      {isPulling ? (\n        <div className=\"p-4\">\n          {Array.from(Array(3)).map((e, i) => {\n            return (\n              <Skeleton\n                title\n                loading\n                avatar\n                children\n                paragraph\n                active\n                key={i}\n              />\n            )\n          })}\n        </div>\n      ) : (\n        <InfiniteScroll\n          pageStart={skipRef.current}\n          initialLoad={true}\n          loadMore={loadMore}\n          hasMore={skipRef.current + 100 < props.itemsCount}\n          useWindow={false}\n          threshold={600}\n          loader={\n            <div\n              className=\"w-full h-24 flex items-center justify-center\"\n              key=\"loader\"\n            >\n              <Spin size=\"default\" />\n            </div>\n          }\n        >\n          {props.items.map((item) => (\n            <CompWxBasicObject item={item} key={item.id} />\n          ))}\n        </InfiniteScroll>\n      )}\n    </Card>\n  )\n}\n\nexport default connect(\n  (state: State): CompWxBasicObjectsStates => ({\n    wxid: state.wxSelf.id,\n  }),\n  (dispatch, ownProps): CompWxBasicObjectsDispatch => ({\n    pushMoreFriends: (payload) =>\n      dispatch({\n        type: EventHttp.FETCH_MORE_FRIENDS_SUCCESS,\n        payload,\n      }),\n  })\n)(CompWxBasicObjects)\n","import React from \"react\"\nimport CompServices from \"./CompServices/CompServices\"\nimport CompWxBasicObjects from \"./CompWxBasicObjects/CompWxBasicObjects\"\nimport { PayloadWxContact, PayloadWxRoom } from \"../../DS/interface\"\nimport { connect } from \"react-redux\"\nimport { State } from \"../../store\"\n\nexport interface CompContent2States {\n  friends: PayloadWxContact[]\n  friendsCount: number\n  rooms: PayloadWxRoom[]\n}\n\nexport const CompContent2 = (props: CompContent2States) => {\n  console.log(\"rendered CompContent2\")\n\n  return (\n    <div className=\"w-full p-0 md:p-4 h-full flex flex-col\">\n      <div className=\"order-9 md:order-5 my-4\">\n        <CompServices />\n      </div>\n\n      <div className=\"order-6 my-4\">\n        <CompWxBasicObjects\n          items={props.friends as any}\n          title={\"好友列表\"}\n          itemsCount={props.friendsCount}\n        />\n      </div>\n\n      <div className=\"order-7 my-4\">\n        <CompWxBasicObjects\n          items={props.rooms as any}\n          title={\"群组列表\"}\n          itemsCount={props.rooms.length}\n        />\n      </div>\n    </div>\n  )\n}\n\nexport default connect(\n  (state: State): CompContent2States => ({\n    friends: state.wxFriends,\n    rooms: state.wxRooms,\n    friendsCount: state.wxFriendsCount,\n  })\n)(CompContent2)\n","import React, { useState } from \"react\"\nimport { Modal, Spin } from \"antd\"\nimport { ScanStatus, Visibility } from \"../../../DS/enums\"\nimport { PayloadWxScan } from \"../../../DS/interface\"\nimport { connect } from \"react-redux\"\nimport { State } from \"../../../store\"\n\nexport interface CompWechatyScanStates {\n  visibility: boolean\n  wechatyScan: PayloadWxScan\n}\n\nconst CompWechatScan = (props: CompWechatyScanStates) => {\n  console.log(`rendered CompScan `)\n\n  const [imgSrc, setImgSrc] = useState<string>(\"\")\n\n  const msg = props.wechatyScan\n  if (msg.qrcode) {\n    require(\"qrcode\")\n      .toDataURL(msg.qrcode)\n      .then((src: string) => setImgSrc(src))\n  }\n\n  return (\n    <Modal\n      title={process.env.REACT_APP_NAME + \"扫码登录系统\"}\n      visible={props.visibility}\n      destroyOnClose={true}\n      footer={null}\n      keyboard={false}\n      maskClosable={false}\n      closable={false}\n    >\n      <div className=\"flex flex-col items-center\">\n        {msg.status === ScanStatus.Waiting && imgSrc ? (\n          <img src={imgSrc} alt={\"登录二维码\"} />\n        ) : (\n          <Spin className=\"h-32 flex items-center\" size=\"default\" />\n        )}\n        <p>\n          {(() => {\n            switch (msg.status) {\n              case ScanStatus.Unknown:\n                return \"正在努力加载，嘿呀呀呀……\"\n              case ScanStatus.Waiting:\n                return \"请及时扫描哦~\"\n              case ScanStatus.Scanned:\n                return \"扫描成功！等候确认……\"\n              case ScanStatus.Confirmed:\n                return \"确认成功！正在加载……\"\n              case ScanStatus.Cancel:\n                // todo 取消处理\n                return \"取消啦\"\n              case ScanStatus.Timeout:\n                // todo 超时处理\n                return \"超时！\"\n            }\n          })()}\n        </p>\n      </div>\n    </Modal>\n  )\n}\n\nexport default connect((state: State) => ({\n  visibility: state.status[Visibility.ScanModal],\n  wechatyScan: state.wxScan,\n}))(CompWechatScan)\n","import CompWechatScan from \"./CompWechatyScan/CompWechatScan\"\nimport React from \"react\"\n\nexport const CompInvisible = () => {\n  console.log(\"rendered CompInvisible\")\n\n  return (\n    <div>\n      <CompWechatScan />\n    </div>\n  )\n}\n\nexport default CompInvisible\n","import React from \"react\"\nimport { Layout } from \"antd\"\nimport CompFooter from \"./components/CompFooter/CompFooter\"\nimport CompHeader from \"./components/CompHeader/header\"\nimport CompContent1 from \"./components/CompContent1/CompContent1\"\nimport CompContent2 from \"./components/CompContent2/CompContent2\"\nimport CompInvisible from \"./components/CompInvisible/CompInvisible\"\n\nconst App = () => {\n  console.log(\"rendered APP\")\n\n  return (\n    <Layout className=\"relative min-h-screen min-w-screen\">\n      <Layout.Header className=\"flex items-center bg-pink-200 p-4\">\n        <CompHeader />\n      </Layout.Header>\n\n      <Layout.Content className=\"w-full xl:w-4/5 mx-auto flex flex-wrap\">\n        {/* 最重要的主区域 */}\n        <div className=\"order-1 flex-1 w-full md:w-3/5\">\n          <CompContent1 />\n        </div>\n\n        {/* 次重要的右区域 */}\n        <div className=\"order-2 w-full md:w-2/5\">\n          <CompContent2 />\n        </div>\n      </Layout.Content>\n\n      <Layout.Footer className=\" w-full\">\n        <CompFooter />\n      </Layout.Footer>\n\n      <CompInvisible />\n    </Layout>\n  )\n}\n\nexport default App\n","import React from \"react\"\nimport ReactDom from \"react-dom\"\nimport { ConfigProvider } from \"antd\"\nimport { Provider } from \"react-redux\"\n\nimport App from \"./App\"\nimport socketStore from \"./store\"\n\nimport \"antd/dist/antd.css\"\nimport \"./styles/css/output.css\"\nimport \"./styles/css/custom-antd.css\"\nimport \"./styles/css/list.scss\"\nimport \"./styles/css/login.css\"\n\nReactDom.render(\n  <React.Fragment>\n    {/* 配置store */}\n    <Provider store={socketStore}>\n      {/* 配置antD尺寸 */}\n      <ConfigProvider componentSize=\"small\">\n        <App />\n      </ConfigProvider>\n    </Provider>\n  </React.Fragment>,\n\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}